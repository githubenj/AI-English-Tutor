import sounddevice as sd
import scipy.io.wavfile
import whisper
import random
import os
import subprocess
import sys


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
def install_if_missing(package):
    try:
        __import__(package)
    except ImportError:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])


install_if_missing("pydub")
install_if_missing("simpleaudio")

import time
import pygame
import speech_recognition as sr
import subprocess
import threading
import numpy as np
import winsound
import re
from num2words import num2words
from dotenv import load_dotenv
from openai import OpenAI
from TTS.api import TTS as TTS_API  # ‚Üê –¥–ª—è –æ–∑–≤—É—á–∫–∏

try:
    import keyboard
except ImportError:
    keyboard = None

# ===== –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–∞ OpenAI =====
pygame.mixer.init()
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

# ===== –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ =====
print("\n–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å GPT:")
print("[1] üí¨ gpt-3.5-turbo (–±—ã—Å—Ç—Ä–µ–µ, –¥–µ—à–µ–≤–ª–µ)")
print("[2] üß† gpt-4o (—É–º–Ω–µ–µ, –¥–æ—Ä–æ–∂–µ)")

model_choice = input("–¢–≤–æ–π –≤—ã–±–æ—Ä (1/2): ").strip()
selected_model = "gpt-4o" if model_choice == "2" else "gpt-3.5-turbo"
print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {selected_model}")

# ===== Whisper =====
print("üß† –ó–∞–≥—Ä—É–∂–∞–µ–º Whisper –º–æ–¥–µ–ª—å –Ω–∞ GPU...")
whisper_model = whisper.load_model("base", device="cuda")
print("‚úÖ Whisper —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ!")

# ===== –ì–æ–ª–æ—Å –õ–∞–ø—É—à–∫–∏ (TTS - tacotron –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º nova) =====
fs = 16000
filename = "my_voice.wav"

import io
from pydub import AudioSegment
from pydub.playback import play


def speak_nova(text):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –∞—É–¥–∏–æ
        response = client.audio.speech.create(
            model="tts-1",
            voice="nova",
            input=text
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
        audio_bytes = io.BytesIO(response.content)

        # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º
        audio = AudioSegment.from_file(audio_bytes, format="mp3")
        play(audio)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")


# ===== –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª =====
# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
echo_repeat = False


# ===== GPT-–∞–Ω–∞–ª–∏–∑ =====
# –°—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–º–ø—Ç–∞:
# prompt = f"You are an empathetic English tutor. Analyze this spoken sentence and give kind and constructive feedback on pronunciation, grammar or word choice:\n\n{text}"
def gpt_feedback(text, mode="default"):
    if mode == "text_input":
        prompt = f"""
You are a kind and professional English teacher. The student has submitted a written response. Your feedback should be brief and to the point.

Please do the following:
- Provide kind and constructive feedback on grammar, vocabulary, word choice and structure.
- Explain your choice.
- Suggest improvements, if any.
- If there are any mistakes, show all them in **"before ‚Üí after"** format.
- Write the text with the corrected mistakes.
- Be kind and encouraging, like a supportive English tutor.

Student's text:        
{text}
"""
        response = client.chat.completions.create(
            model=selected_model,
            messages=[
                {"role": "system", "content": "You are an encouraging English tutor with deep expertise."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=170,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    else:
        prompt = f"""
You are a professional English pronunciation and speaking coach. When the student says something, analyze it and give structured, supportive feedback with the following structure:

1. Provide encouraging and constructive feedback
2. Emphasize natural spoken English rhythm and tone.
3. Repeat the sentence with corrected pronunciation, grammar, word choice and intonation after that.

Structure your response like:
üí¨ Feedback: [Your kind feedback here about pronunciation, word choice, grammar and clarity.]
üó£Ô∏è Corrected Sentence: [Your corrected or improved version here, spoken naturally with correct intonation.]"
"""
        prompt += f"\n\nUser said:\n{text}"

    response = client.chat.completions.create(
        model=selected_model,
        messages=[
            {"role": "system",
             "content": "You are a helpful English tutor with British politeness and supportive tone."},
            {"role": "user", "content": prompt}
        ],
        max_tokens=150,
        temperature=0.7
    )
    return response.choices[0].message.content.strip()


while True:
    print("\n–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:")
    print("[1] ‚è± 10 —Å–µ–∫—É–Ω–¥ coach")
    print("[2] üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥")
    print("[3] üó£Ô∏è –†–µ–∂–∏–º –õ–∞–ø—É–ª—å–∫–∏-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π)")
    print("[4] ü§ñ –¢—Ä–µ–Ω–µ—Ä –ø–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—é (–∞–Ω–∞–ª–∏–∑ –∏ —Ñ–∏–¥–±—ç–∫ –æ—Ç –õ–∞–ø—É–ª—å–∫–∏)")
    print("[5] üìö Dictionary Mode (learn word or idiom deeply)")

    choice = input("–¢–≤–æ–π –≤—ã–±–æ—Ä (1/2/3/4/5): ").strip()

    # ===== –í–∞—Ä–∏–∞–Ω—Ç 1 –∏ 2: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å =====
    if choice == "1":
        seconds = 10


        def countdown(seconds):
            for i in range(seconds, 0, -1):
                print(" " * 50, end="\r")  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏
                print(f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {i} —Å–µ–∫", end="\r")
                time.sleep(1)
            print(" " * 50, end="\r")


        print(f"\nüéôÔ∏è –ì–æ–≤–æ—Ä–∏ –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞ ({seconds} —Å–µ–∫—É–Ω–¥)...")
        winsound.Beep(1000, 300)

        timer_thread = threading.Thread(target=countdown, args=(seconds,))
        timer_thread.start()

        recording = sd.rec(int(seconds * fs), samplerate=fs, channels=1, dtype='int16')
        sd.wait()
        timer_thread.join()

        scipy.io.wavfile.write(filename, fs, recording)
        print(f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {filename}")

    # ===== –í–∞—Ä–∏–∞–Ω—Ç 2: —Ç–µ–∫—Å—Ç =====
    elif choice == "2":
        print("üí¨ Enter your text (press Enter twice to finish):")
        lines = []
        empty_count = 0

        while True:
            line = input()
            if line.strip() == "":
                empty_count += 1
                if empty_count == 2:
                    break
            else:
                empty_count = 0
                lines.append(line)

        recognized_words = "\n".join(lines).strip()
        print("üìÑ You wrote:", recognized_words)

        # GPT-–∞–Ω–∞–ª–∏–∑ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∏–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        comment = gpt_feedback(recognized_words, mode="text_input")
        print("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –õ–∞–ø—É—à–∫–∏ (GPT):", comment)
        speak_nova(comment)

        # üîÅ –ü–æ–≤—Ç–æ—Ä –∏–ª–∏ –≤—ã—Ö–æ–¥
        print("\n–ß—Ç–æ –¥–∞–ª—å—à–µ?")
        print("[1] üîÅ –í–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞")
        print("[2] ‚ùå –í—ã–π—Ç–∏")

        next_action = input("–¢–≤–æ–π –≤—ã–±–æ—Ä (1/2): ").strip()
        if next_action != "1":
            print("üëã See you next time! I'm always here when you need me üåü.")
            break
        else:
            continue

    # ===== –í–∞—Ä–∏–∞–Ω—Ç 3: –†–µ–∂–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ =====
    elif choice == "3":
        def gpt_pronunciation_greeting():
            prompt = "Say a kind and cheerful greeting as an English tutor-assistant who is happy to help the student. Keep it under 15 words and cheerful."
            resp = client.chat.completions.create(
                model=selected_model,
                messages=[
                    {"role": "system", "content": "You are a friendly and supportive English pronunciation coach."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=60,
                temperature=0.9
            )
            return resp.choices[0].message.content.strip()


        # üí¨ –ü–æ–ª—É—á–∞–µ–º –∏ —Å—Ä–∞–∑—É –≤—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –õ–∞–ø—É–ª—å–∫–∏-–∫–æ—É—á–∞
        greeting = gpt_pronunciation_greeting()
        print("ü§ñ –õ–∞–ø—É–ª—å–∫–∞:", greeting)
        speak_nova(greeting)

        while True:
            if not keyboard:
             print("‚ö†Ô∏è –ú–æ–¥—É–ª—å keyboard –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ —á–µ—Ä–µ–∑: pip install keyboard")
             continue

            stop_flag = threading.Event()


            def stop_recording(event):
                stop_flag.set()


            keyboard.on_press_key("space", stop_recording)

            print("\nüéôÔ∏è Assistant mode is active:")
            print("   ‚ñ∂Ô∏è –ù–∞–∂–∏–º–∞–π [P], —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å/—Å–Ω—è—Ç—å –ø–∞—É–∑—É")
            print("   ‚èπ –ù–∞–∂–º–∏ [–ø—Ä–æ–±–µ–ª], —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å")
            winsound.Beep(1000, 300)

            chunks = []
            paused = False
            chunk_duration = 0.5
            frames_per_chunk = int(fs * chunk_duration)
            current_chunk = []

            try:
                while not stop_flag.is_set():
                    if keyboard.is_pressed("p"):
                        paused = not paused
                        print("‚è∏ –ü–∞—É–∑–∞." if paused else "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ.")
                        time.sleep(0.5)

                    if not paused:
                        data = sd.rec(frames_per_chunk, samplerate=fs, channels=1, dtype='int16')
                        sd.wait()
                        current_chunk.append(data)

            except KeyboardInterrupt:
                print("‚õî Stopped by you ‚Äî I‚Äôll be here whenever you need me.üíñ")

            if current_chunk:
                chunks.append(np.concatenate(current_chunk, axis=0))

            if not chunks:
                print("ü´¢ Nothing recorded... Let‚Äôs try again, sweet voice!")
                continue

            final_audio = np.concatenate(chunks, axis=0)
            scipy.io.wavfile.write(filename, fs, final_audio)
            # print(f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {filename}")  # ‚Üê —Ç–æ–∂–µ —É–±–∏—Ä–∞–µ–º

            keyboard.unhook_all()
            # ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç-GPT –æ—Ç–≤–µ—á–∞–µ—Ç
            print("üîç Transcribing your speech...")
            result = whisper_model.transcribe(filename)
            recognized = result["text"].strip()
            print("üìÑ You said:", recognized)

            if not recognized:
                no_input_responses = [
                    "Sorry, I didn't catch that. Could you say it again?",
                    "I didn‚Äôt hear you clearly. Please repeat.",
                    "Hmm, I missed that. Would you mind repeating?",
                    "Could you say that one more time?",
                    "I'm here, but I didn't understand. Try again, please!",
                    "Oopsie~ I missed that! Can you say it again, pretty please?",
                    "Tehee~ I didn‚Äôt hear you. Wanna try one more time? üíï",
                    "Your voice got shy! Could you speak a little louder, sweetie?",
                    "Nyaa~ I didn‚Äôt catch that, but I‚Äôm listening! Try again? üêæ",
                    "Hmm... That was too soft for my ears! Say it again? üå∏",
                    "Oh no~ Lapulka didn‚Äôt hear you! Could you say it again with love?"
                ]
                message = random.choice(no_input_responses)
                print("üò∂", message)  # ‚Üê ‚Üê ‚Üê –¥–æ–±–∞–≤—å —ç—Ç–æ, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ
                speak_nova(message)
                continue


            def gpt_assistant_reply(text):
                prompt = f"""You are a helpful and supportive English tutor. Respond naturally and clearly to what the user says. Keep your answers short and to the point, giving explanations, corrections, or encouragement where needed.

User said: "{text}"
"""
                resp = client.chat.completions.create(
                    model=selected_model,
                    messages=[
                        {"role": "system", "content": "You are a kind and professional English tutor."},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=130,
                    temperature=0.7
                )
                return resp.choices[0].message.content.strip()


            reply = gpt_assistant_reply(recognized)
            print("ü§ñ –õ–∞–ø—É–ª—å–∫–∞:", reply)
            speak_nova(reply)

            if any(word in recognized.lower() for word in ["exit", "quit", "–≤—ã–π—Ç–∏", "—Å—Ç–æ–ø"]):
                speak_nova("Okay, see you next time!")
                break



    elif choice == "4":
        def gpt_pronunciation_greeting():
            prompt = "Say a friendly and encouraging greeting as an English pronunciation coach. Keep it under 15 words and cheerful."
            resp = client.chat.completions.create(
                model=selected_model,
                messages=[
                    {"role": "system", "content": "You are a friendly and supportive English pronunciation coach."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=60,
                temperature=0.9
            )
            return resp.choices[0].message.content.strip()


        # üí¨ –ü–æ–ª—É—á–∞–µ–º –∏ —Å—Ä–∞–∑—É –≤—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –õ–∞–ø—É–ª—å–∫–∏-–∫–æ—É—á–∞
        greeting = gpt_pronunciation_greeting()
        print("ü§ñ –õ–∞–ø—É–ª—å–∫–∞:", greeting)
        speak_nova(greeting)

        if not keyboard:
            print("‚ö†Ô∏è –ú–æ–¥—É–ª—å keyboard –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ —á–µ—Ä–µ–∑: pip install keyboard")
            continue

        while True:
            stop_flag = threading.Event()

            def stop_recording(event):
                stop_flag.set()

            keyboard.on_press_key("space", stop_recording)

            print("\nüéôÔ∏è üó£Ô∏è –¢—Ä–µ–Ω–µ—Ä –ø–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—é –≤–∫–ª—é—á–µ–Ω:")
            print("   ‚ñ∂Ô∏è –ù–∞–∂–∏–º–∞–π [P], —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å/—Å–Ω—è—Ç—å –ø–∞—É–∑—É")
            print("   ‚èπ –ù–∞–∂–º–∏ [–ø—Ä–æ–±–µ–ª], —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å")
            winsound.Beep(1000, 300)

            chunks = []
            paused = False
            chunk_duration = 0.5
            frames_per_chunk = int(fs * chunk_duration)
            current_chunk = []

            try:
                while not stop_flag.is_set():
                    if keyboard.is_pressed("p"):
                        paused = not paused
                        print("‚è∏ –ü–∞—É–∑–∞." if paused else "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ.")
                        time.sleep(0.5)

                    if not paused:
                        data = sd.rec(frames_per_chunk, samplerate=fs, channels=1, dtype='int16')
                        sd.wait()
                        current_chunk.append(data)

            except KeyboardInterrupt:
                print("‚õî Stopped by you ‚Äî I‚Äôll be here whenever you need me.üíñ")

            if current_chunk:
                chunks.append(np.concatenate(current_chunk, axis=0))

            if not chunks:
                print("ü´¢ Nothing recorded... Let‚Äôs try again, sweet voice!")
                continue

            final_audio = np.concatenate(chunks, axis=0)
            scipy.io.wavfile.write(filename, fs, final_audio)

            keyboard.unhook_all()

            # üîç –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            result = whisper_model.transcribe(filename, language="en")
            recognized = result["text"].strip()

            import random


            not_recognized_phrases = [
                "Oops, I didn‚Äôt catch that. Could you please say it again?",
                "Hmm, I couldn‚Äôt quite hear that. Try one more time?",
                "I missed that one, love. Let‚Äôs try again üí´",
                "Say that again for me, sweetie üíó",
                "Can you repeat that a little louder? I‚Äôm all ears! üê∞",
                "Could you speak up a little bit? I really want to hear you clearly üéÄ",
                "Let‚Äôs try that again together, darling ‚ú®",
                "Oh no, I missed that. Want to give it another try? üíï",
                "That one slipped past me! Say it one more time, please üåà",
                "Just one more time, cutie üåü I‚Äôm listening with all my heart üíû",
                "It sounded soft like a whisper... mind saying it again? üéß",
                "Hmm, I blinked for a second üò≥ Could you repeat that?",
                "You sounded adorable, but I need to hear you again üíñ"
            ]

            if not recognized:
                message = random.choice(not_recognized_phrases)
                print("üò∂ " + message)
                speak_nova(message)
                continue

            print("üìÑ You said:", recognized)


            # üí¨ –û—Ç–≤–µ—Ç GPT
            def gpt_pronunciation_reply(text):
                prompt = f"""

You are a professional English pronunciation and speaking coach. When the student says something, analyze it and give structured, supportive feedback with the following structure:

1. Provide encouraging and constructive feedback
2. Emphasize natural spoken English rhythm and tone.
3. Repeat the sentence with corrected pronunciation, grammar, word choice and intonation after that.

Structure your response like:

üí¨ Feedback: [Your kind feedback here about pronunciation, word choice, grammar and clarity.]
üó£Ô∏è Corrected Sentence: [Your corrected or improved version here, spoken naturally with correct intonation.]

Student's sentence:
{text}
"""
                resp = client.chat.completions.create(
                    model=selected_model,
                    messages=[
                        {"role": "system", "content": "You are a supportive English pronunciation coach."},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=300,
                    temperature=0.7
                )
                return resp.choices[0].message.content.strip()

            result = gpt_pronunciation_reply(recognized)
            print("ü§ñ –õ–∞–ø—É–ª—å–∫–∞:", result)

            # üîä –û–∑–≤—É—á–∫–∞
            speak_nova(result)

            # üõë –í—ã—Ö–æ–¥ –ø–æ –∫–æ–º–∞–Ω–¥–µ
            if any(word in recognized.lower() for word in ["exit", "quit", "–≤—ã–π—Ç–∏", "—Å—Ç–æ–ø"]):
                speak_nova("Okay, see you next time!")
                break

    elif choice == "5":
        while True:
            print("\nüìö Dictionary Mode activated! Enter a word or idiom you'd like to learn.")
            user_word = input("üî§ Enter a word or phrase: ").strip()

            if not user_word:
                print("‚ùå No input received. Returning to main menu.")
                continue

            # –û–∑–≤—É—á–∫–∞ —Å–ª–æ–≤–∞
            speak_nova(user_word)

            # üéÄ –£–∫—Ä–∞—à–∞–µ–º —Å–ª–æ–≤–æ —ç–º–æ–¥–∂–∏ (–¥–ª—è —Ç–µ–∫—Å—Ç–∞)
            emoji_choices = ["üíó", "üí´", "üåü", "üíï", "üå∏", "üéÄ", "ü©∑", "‚ú®", "üç¨", "ü´∂", "üßÅ", "ü¶ã", "üåà", "üíñ", "üåº", "üå∫", "ü•∞", "üç≠", "üê£", "üíù"]
            random_emoji = random.choice(emoji_choices)
            decorated_word = f"{random_emoji}{user_word}{random_emoji}"

            # GPT-–∑–∞–ø—Ä–æ—Å
            def gpt_dictionary_explanation(word):
                prompt = f"""
Please provide a detailed English dictionary-style explanation for the following word or phrase: "{decorated_word}"

Provide a detailed and structured explanation as follows:

Include:
1. British and American pronunciation in IPA.
2. Part of speech and if it's formal/informal.
3. Meaning(s) in clear English.
4. Notes like: transitive/intransitive (for verbs), countable/uncountable (for nouns). Comparative/Superlative (if adjective):  
- Comparative: [e.g. friendlier / more friendly]  
- Superlative: [e.g. friendliest / most friendly] 
5. Typical prepositions or collocations.
6. Synonyms or similar expressions.
7. 2‚Äì3 real-life usage examples.
8. Usage tips, frequency, common mistakes, cultural context, etc.
"""
                response = client.chat.completions.create(
                    model=selected_model,
                    messages=[
                        {"role": "system", "content": "You are a friendly dictionary expert and English tutor."},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=600,
                    temperature=0.7
                )
                return response.choices[0].message.content.strip()

            # üîé –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = gpt_dictionary_explanation(user_word)
            print(f"\nüìò Dictionary Entry for {decorated_word}:\n")
            print(result)

            # üé§ –û–∑–≤—É—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–æ
            speak_nova(user_word)

            # üí° –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–ø—Ü–∏—è –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            while True:
                print("\nWhat would you like to do next?")
                print("[1] üîÅ Repeat the pronunciation")
                print("[2] üìö Enter another word or phrase")
                print("[3] ‚ùå Return to main menu")

                followup = input("Your choice (1/2/3): ").strip()

                if followup == "1":
                    speak_nova(user_word)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
                elif followup == "2":
                    break  # –í—ã–π–¥–µ–º –∏–∑ while, –Ω–∞—á–Ω—ë—Ç—Å—è —Å–Ω–æ–≤–∞ —Ä–µ–∂–∏–º 5
                elif followup == "3":
                    print("üëã Returning to main menu!")
                    continue_outer_loop = True
                    break
                else:
                    print("üåÄ Hmm, that option doesn‚Äôt exist. Try again?")

            if 'break_outer' in locals() and break_outer:
                del break_outer
                break  # –ü–æ–ª–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ 5


    else:
        print("üåÄ Hmm... I think you typed something mysterious! Try again?")
        continue

    # ===== –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏ —Ñ–∏–¥–±—ç–∫ =====
    print("üîç Transcribing your speech...")
    result = whisper_model.transcribe(filename)
    recognized = result["text"]


    def convert_digits_to_words(text):
        return re.sub(r'\b\d+\b', lambda x: num2words(int(x.group())), text)


    recognized_words = convert_digits_to_words(recognized)
    print("üìÑ You said:", recognized_words)

    # # üîÅ –°–ø—Ä–æ—Å–∏—Ç—å: –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–æ–ª–æ—Å–æ–º?
    # print("\nüîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–≤–æ—é —Ñ—Ä–∞–∑—É –≥–æ–ª–æ—Å–æ–º Lapulka?")
    # print("[1] –î–∞")
    # print("[2] –ù–µ—Ç")
    # echo_choice = input("–¢–≤–æ–π –≤—ã–±–æ—Ä (1/2): ").strip()
    # echo_repeat = echo_choice == "1"
    # # ===== Jenny –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–≤–æ—é —Ä–µ—á—å =====
    # if echo_repeat:
    #    print("ü™û Lapulka –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–≤–æ—é —Ñ—Ä–∞–∑—É...")
    #    subprocess.run([
    #     "tts",
    #     "--text", recognized_words,
    #     "--model_name", "tts_models/en/jenny/jenny",
    #     "--out_path", "lapulka_echo.wav"
    # ])
    # os.system("start lapulka_echo.wav")

    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –õ–∞–ø—É—à–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ 1 –∏ 4 (–Ω–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ 3)
    if choice in ["1", "4"]:
        comment = gpt_feedback(recognized_words)
        print("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –õ–∞–ø—É—à–∫–∏ (GPT):", comment)
        speak_nova(comment)

        # üîÅ –ü–æ–≤—Ç–æ—Ä –∏–ª–∏ –≤—ã—Ö–æ–¥
        print("\n–ß—Ç–æ –¥–∞–ª—å—à–µ?")
        print("[1] üîÅ –ó–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞")
        print("[2] ‚ùå –í—ã–π—Ç–∏")

        next_action = input("–¢–≤–æ–π –≤—ã–±–æ—Ä (1/2): ").strip()
        if next_action != "1":
            print("üëã See you next time! I'm always here when you need me üåü.")
            break  # ‚Üê —Ç–µ–ø–µ—Ä—å –≤—Å—ë –æ–∫!
