import sounddevice as sd
import scipy.io.wavfile
import whisper
import os
import subprocess
import sys

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
def install_if_missing(package):
    try:
        __import__(package)
    except ImportError:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])

install_if_missing("pydub")
install_if_missing("simpleaudio")

import time
import pygame
import speech_recognition as sr
import subprocess
import threading
import numpy as np
import winsound
import re
from num2words import num2words
from dotenv import load_dotenv
from openai import OpenAI
from TTS.api import TTS as TTS_API  # ‚Üê –¥–ª—è –æ–∑–≤—É—á–∫–∏

try:
    import keyboard
except ImportError:
    keyboard = None

# ===== –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–∞ OpenAI =====
pygame.mixer.init()
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

# ===== Whisper =====
print("üß† –ó–∞–≥—Ä—É–∂–∞–µ–º Whisper –º–æ–¥–µ–ª—å –Ω–∞ GPU...")
whisper_model = whisper.load_model("base", device="cuda")
print("‚úÖ Whisper —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ!")

# ===== –ì–æ–ª–æ—Å –õ–∞–ø—É—à–∫–∏ (TTS - tacotron –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º nova) =====
fs = 16000
filename = "my_voice.wav"

import io
from pydub import AudioSegment
from pydub.playback import play

def speak_nova(text):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –∞—É–¥–∏–æ
        response = client.audio.speech.create(
            model="tts-1",
            voice="nova",
            input=text
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
        audio_bytes = io.BytesIO(response.content)

        # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º
        audio = AudioSegment.from_file(audio_bytes, format="mp3")
        play(audio)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")

# ===== –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª =====
# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =====
echo_repeat = False
while True:
    print("\n–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏:")
    print("[1] ‚è± 10 —Å–µ–∫—É–Ω–¥")
    print("[2] ‚è± 60 —Å–µ–∫—É–Ω–¥")
    print("[3] üñê –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º —Å –ø–∞—É–∑–æ–π –∏ –ø—Ä–æ–±–µ–ª–æ–º")

    choice = input("–¢–≤–æ–π –≤—ã–±–æ—Ä (1/2/3): ").strip()

    # ===== –í–∞—Ä–∏–∞–Ω—Ç 1 –∏ 2: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å =====
    if choice in ["1", "2"]:
        seconds = 10 if choice == "1" else 60

        def countdown(seconds):
            for i in range(seconds, 0, -1):
                print(" " * 50, end="\r")  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏
                print(f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {i} —Å–µ–∫", end="\r")
                time.sleep(1)
            print(" " * 50, end="\r")

        print(f"\nüéôÔ∏è –ì–æ–≤–æ—Ä–∏ –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞ ({seconds} —Å–µ–∫—É–Ω–¥)...")
        winsound.Beep(1000, 300)

        timer_thread = threading.Thread(target=countdown, args=(seconds,))
        timer_thread.start()

        recording = sd.rec(int(seconds * fs), samplerate=fs, channels=1, dtype='int16')
        sd.wait()
        timer_thread.join()

        scipy.io.wavfile.write(filename, fs, recording)
        print(f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {filename}")

    # ===== –í–∞—Ä–∏–∞–Ω—Ç 3: —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º =====
    elif choice == "3":
        if not keyboard:
            print("‚ö†Ô∏è –ú–æ–¥—É–ª—å keyboard –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ —á–µ—Ä–µ–∑: pip install keyboard")
            continue

        stop_flag = threading.Event()

        def stop_recording(event):
            stop_flag.set()

        keyboard.on_press_key("space", stop_recording)

        print("\nüéôÔ∏è –†–µ–∂–∏–º —Ä—É—á–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤–∫–ª—é—á–µ–Ω:")
        print("   ‚ñ∂Ô∏è –ù–∞–∂–∏–º–∞–π [P], —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å/—Å–Ω—è—Ç—å –ø–∞—É–∑—É")
        print("   ‚èπ –ù–∞–∂–º–∏ [–ø—Ä–æ–±–µ–ª], —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å")
        winsound.Beep(1000, 300)

        chunks = []
        paused = False
        chunk_duration = 0.5
        frames_per_chunk = int(fs * chunk_duration)
        current_chunk = []

        try:
            while not stop_flag.is_set():
                if keyboard.is_pressed("p"):
                    paused = not paused
                    print("‚è∏ –ü–∞—É–∑–∞." if paused else "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ.")
                    time.sleep(0.5)

                if not paused:
                    data = sd.rec(frames_per_chunk, samplerate=fs, channels=1, dtype='int16')
                    sd.wait()
                    current_chunk.append(data)

        except KeyboardInterrupt:
            print("‚õî –ü—Ä–µ—Ä–≤–∞–Ω–æ –≤—Ä—É—á–Ω—É—é.")

        if current_chunk:
            chunks.append(np.concatenate(current_chunk, axis=0))

        if not chunks:
            print("‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
            continue

        final_audio = np.concatenate(chunks, axis=0)
        scipy.io.wavfile.write(filename, fs, final_audio)
        print(f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {filename}")

        keyboard.unhook_all()

    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        continue

    # ===== –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏ —Ñ–∏–¥–±—ç–∫ =====
    print("üîç –†–∞—Å–ø–æ–∑–Ω–∞—ë–º...")
    result = whisper_model.transcribe(filename)
    recognized = result["text"]

    def convert_digits_to_words(text):
        return re.sub(r'\b\d+\b', lambda x: num2words(int(x.group())), text)

    recognized_words = convert_digits_to_words(recognized)
    print("üìÑ –¢—ã —Å–∫–∞–∑–∞–ª:", recognized_words)

    # # üîÅ –°–ø—Ä–æ—Å–∏—Ç—å: –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–æ–ª–æ—Å–æ–º?
    # print("\nüîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–≤–æ—é —Ñ—Ä–∞–∑—É –≥–æ–ª–æ—Å–æ–º Lapulka?")
    # print("[1] –î–∞")
    # print("[2] –ù–µ—Ç")
    # echo_choice = input("–¢–≤–æ–π –≤—ã–±–æ—Ä (1/2): ").strip()
    # echo_repeat = echo_choice == "1"
    # # ===== Jenny –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–≤–æ—é —Ä–µ—á—å =====
    # if echo_repeat:
    #    print("ü™û Lapulka –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —Ç–≤–æ—é —Ñ—Ä–∞–∑—É...")
    #    subprocess.run([
    #     "tts",
    #     "--text", recognized_words,
    #     "--model_name", "tts_models/en/jenny/jenny",
    #     "--out_path", "lapulka_echo.wav"
    # ])
    # os.system("start lapulka_echo.wav")

    # ===== GPT-–∞–Ω–∞–ª–∏–∑ =====
    def gpt_feedback(text):
        prompt = f"You are an empathetic English tutor. Analyze this spoken sentence and give kind and constructive feedback on pronunciation, grammar or word choice:\n\n{text}"

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful English tutor with British politeness and supportive tone."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=150,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()

    comment = gpt_feedback(recognized_words)
    print("üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –õ–∞–ø—É—à–∫–∏ (GPT):", comment)
    speak_nova(comment)

    # üîÅ –ü–æ–≤—Ç–æ—Ä –∏–ª–∏ –≤—ã—Ö–æ–¥
    print("\n–ß—Ç–æ –¥–∞–ª—å—à–µ?")
    print("[1] üîÅ –ó–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞")
    print("[2] ‚ùå –í—ã–π—Ç–∏")

    next_action = input("–¢–≤–æ–π –≤—ã–±–æ—Ä (1/2): ").strip()
    if next_action != "1":
        print("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏, –ú–æ–¥–µ–ª—å –ê! –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
        break
